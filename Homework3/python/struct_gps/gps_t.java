/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package struct_gps;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class gps_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public double latitude;
    public String latsign;
    public double longitude;
    public String longsign;
    public double HDOP;
    public double altitude;
    public String altunit;
    public double easting;
    public double northing;
    public short zone;
    public String zonelet;
 
    public gps_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x713007883bb8407bL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(struct_gps.gps_t.class))
            return 0L;
 
        classes.add(struct_gps.gps_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.timestamp); 
 
        outs.writeDouble(this.latitude); 
 
        __strbuf = new char[this.latsign.length()]; this.latsign.getChars(0, this.latsign.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeDouble(this.longitude); 
 
        __strbuf = new char[this.longsign.length()]; this.longsign.getChars(0, this.longsign.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeDouble(this.HDOP); 
 
        outs.writeDouble(this.altitude); 
 
        __strbuf = new char[this.altunit.length()]; this.altunit.getChars(0, this.altunit.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeDouble(this.easting); 
 
        outs.writeDouble(this.northing); 
 
        outs.writeShort(this.zone); 
 
        __strbuf = new char[this.zonelet.length()]; this.zonelet.getChars(0, this.zonelet.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public gps_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public gps_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static struct_gps.gps_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        struct_gps.gps_t o = new struct_gps.gps_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.timestamp = ins.readLong();
 
        this.latitude = ins.readDouble();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.latsign = new String(__strbuf);
 
        this.longitude = ins.readDouble();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.longsign = new String(__strbuf);
 
        this.HDOP = ins.readDouble();
 
        this.altitude = ins.readDouble();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.altunit = new String(__strbuf);
 
        this.easting = ins.readDouble();
 
        this.northing = ins.readDouble();
 
        this.zone = ins.readShort();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.zonelet = new String(__strbuf);
 
    }
 
    public struct_gps.gps_t copy()
    {
        struct_gps.gps_t outobj = new struct_gps.gps_t();
        outobj.timestamp = this.timestamp;
 
        outobj.latitude = this.latitude;
 
        outobj.latsign = this.latsign;
 
        outobj.longitude = this.longitude;
 
        outobj.longsign = this.longsign;
 
        outobj.HDOP = this.HDOP;
 
        outobj.altitude = this.altitude;
 
        outobj.altunit = this.altunit;
 
        outobj.easting = this.easting;
 
        outobj.northing = this.northing;
 
        outobj.zone = this.zone;
 
        outobj.zonelet = this.zonelet;
 
        return outobj;
    }
 
}

