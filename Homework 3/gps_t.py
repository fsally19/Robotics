"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class gps_t(object):
    __slots__ = ["timestamp", "latitude", "latsign", "longitude", "longsign", "HDOP", "altitude", "altunit", "easting", "northing", "zone", "zonelet"]

    def __init__(self):
        self.timestamp = 0
        self.latitude = 0.0
        self.latsign = ""
        self.longitude = 0.0
        self.longsign = ""
        self.HDOP = 0.0
        self.altitude = 0.0
        self.altunit = ""
        self.easting = 0.0
        self.northing = 0.0
        self.zone = 0
        self.zonelet = ""

    def encode(self):
        buf = BytesIO()
        buf.write(gps_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qd", self.timestamp, self.latitude))
        __latsign_encoded = self.latsign.encode('utf-8')
        buf.write(struct.pack('>I', len(__latsign_encoded)+1))
        buf.write(__latsign_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">d", self.longitude))
        __longsign_encoded = self.longsign.encode('utf-8')
        buf.write(struct.pack('>I', len(__longsign_encoded)+1))
        buf.write(__longsign_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">dd", self.HDOP, self.altitude))
        __altunit_encoded = self.altunit.encode('utf-8')
        buf.write(struct.pack('>I', len(__altunit_encoded)+1))
        buf.write(__altunit_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ddh", self.easting, self.northing, self.zone))
        __zonelet_encoded = self.zonelet.encode('utf-8')
        buf.write(struct.pack('>I', len(__zonelet_encoded)+1))
        buf.write(__zonelet_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gps_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gps_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gps_t()
        self.timestamp, self.latitude = struct.unpack(">qd", buf.read(16))
        __latsign_len = struct.unpack('>I', buf.read(4))[0]
        self.latsign = buf.read(__latsign_len)[:-1].decode('utf-8', 'replace')
        self.longitude = struct.unpack(">d", buf.read(8))[0]
        __longsign_len = struct.unpack('>I', buf.read(4))[0]
        self.longsign = buf.read(__longsign_len)[:-1].decode('utf-8', 'replace')
        self.HDOP, self.altitude = struct.unpack(">dd", buf.read(16))
        __altunit_len = struct.unpack('>I', buf.read(4))[0]
        self.altunit = buf.read(__altunit_len)[:-1].decode('utf-8', 'replace')
        self.easting, self.northing, self.zone = struct.unpack(">ddh", buf.read(18))
        __zonelet_len = struct.unpack('>I', buf.read(4))[0]
        self.zonelet = buf.read(__zonelet_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if gps_t in parents: return 0
        tmphash = (0x713007883bb8407b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gps_t._packed_fingerprint is None:
            gps_t._packed_fingerprint = struct.pack(">Q", gps_t._get_hash_recursive([]))
        return gps_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

